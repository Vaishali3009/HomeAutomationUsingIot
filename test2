AccountStatus status = Arrays.stream(AccountStatus.values())
    .filter(e -> e.getValue().equals(dbResult.get().getDomesticAccountType()))
    .findFirst()
    .orElseThrow(() -> new IllegalArgumentException("Invalid account status: " + dbResult.get().getDomesticAccountType()));


2025-07-22T16:43:45.613Z "DEBUG [bdd-ms-esp-simulation-service,traceId=687fbfc0b89a88f6d1c3b3d703a834f0,spanId=d1c3b3d703a834f0]" 1 --- [bdd-ms-esp-simulation-service] [nio-8080-exec-1] [687fbfc0b89a88f6d1c3b3d703a834f0-d1c3b3d703a834f0] s.e.SoapFaultAnnotationExceptionResolver : Resolving exception from endpoint [public void com.rbs.bdd.infrastructure.soap.api.PaymentValidationSoapAdapter.validateArrangementForPayment(com.rbsg.soa.c040paymentmanagement.arrvalidationforpayment.v01.ValidateArrangementForPaymentRequest,org.springframework.ws.context.MessageContext)]: com.rbs.bdd.application.exception.AccountValidationException: Validation failed
2025-07-22T16:43:45.615Z "DEBUG [bdd-ms-esp-simulation-service,traceId=687fbfc0b89a88f6d1c3b3d703a834f0,spanId=d1c3b3d703a834f0]" 1 --- [bdd-ms-esp-simulation-service] [nio-8080-exec-1] [687fbfc0b89a88f6d1c3b3d703a834f0-d1c3b3d703a834f0] o.s.w.s.s.e.SimpleSoapExceptionResolver  : Resolving exception from endpoint [public void com.rbs.bdd.infrastructure.soap.api.PaymentValidationSoapAdapter.validateArrangementForPayment(com.rbsg.soa.c040paymentmanagement.arrvalidationforpayment.v01.ValidateArrangementForPaymentRequest,org.springframework.ws.context.MessageContext)]: com.rbs.bdd.application.exception.AccountValidationException: Validation failed
2025-07-22T16:43:45.648Z "DEBUG [bdd-ms-esp-simulation-service,traceId=687fbfc0b89a88f6d1c3b3d703a834f0,spanId=d1c3b3d703a834f0]" 1 --- [bdd-ms-esp-simulation-service] [nio-8080-exec-1] [687fbfc0b89a88f6d1c3b3d703a834f0-d1c3b3d703a834f0] o.s.w.soap.server.SoapMessageDispatcher  : Endpoint invocation resulted in exception - responding with Fault
com.rbs.bdd.application.exception.AccountValidationException: Validation failed
	at com.rbs.bdd.application.service.AccountValidationService.validateBusinessRules(AccountValidationService.java:108) ~[!/:1.0]
	at com.rbs.bdd.application.service.AccountValidationOrchestrator.validateArrangementForPayment(AccountValidationOrchestrator.java:36) ~[!/:1.0]
	at com.rbs.bdd.infrastructure.soap.api.PaymentValidationSoapAdapter.validateArrangementForPayment(PaymentValidationSoapAdapter.java:59) ~[!/:1.0]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.ws.server.endpoint.MethodEndpoint.invoke(MethodEndpoint.java:133) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.ws.server.endpoint.adapter.DefaultMethodEndpointAdapter.invokeInternal(DefaultMethodEndpointAdapter.java:285) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.ws.server.endpoint.adapter.AbstractMethodEndpointAdapter.invoke(AbstractMethodEndpointAdapter.java:54) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.ws.server.MessageDispatcher.dispatch(MessageDispatcher.java:230) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.ws.server.MessageDispatcher.receive(MessageDispatcher.java:174) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.ws.transport.support.WebServiceMessageReceiverObjectSupport.handleConnection(WebServiceMessageReceiverObjectSupport.java:88) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.ws.transport.http.WebServiceMessageReceiverHandlerAdapter.handle(WebServiceMessageReceiverHandlerAdapter.java:60) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.ws.transport.http.MessageDispatcherServlet.doService(MessageDispatcherServlet.java:288) ~[spring-ws-core-4.0.10.jar!/:na]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.6.jar!/:6.2.6]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.6.jar!/:6.2.6]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:649) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.6.jar!/:6.2.6]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:710) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:130) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.40.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:109) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:109) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:109) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:109) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.8.jar!/:6.2.8]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:109) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:79) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:718) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:396) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1773) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:637) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:59) ~[tomcat-embed-core-11.0.8.jar!/:na]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]
Caused by: java.lang.IllegalArgumentException: No enum constant com.rbs.bdd.domain.enums.AccountStatus.Domestic - Restricted
	at java.base/java.lang.Enum.valueOf(Enum.java:293) ~[na:na]
	at com.rbs.bdd.domain.enums.AccountStatus.valueOf(AccountStatus.java:7) ~[!/:1.0]
	at com.rbs.bdd.application.service.AccountValidationService.handleBusinessValidation(AccountValidationService.java:134) ~[!/:1.0]
	at com.rbs.bdd.application.service.AccountValidationService.validateBusinessRules(AccountValidationService.java:100) ~[!/:1.0]
	... 49 common frames omitted



-------------------
package com.rbs.bdd.application.service;


import com.rbs.bdd.application.exception.AccountValidationException;
import com.rbs.bdd.application.port.out.AccountValidationPort;
import com.rbs.bdd.common.context.TransactionIdContext;
import com.rbs.bdd.domain.enums.*;
import com.rbs.bdd.domain.model.ErrorDetail;
import com.rbs.bdd.infrastructure.entity.CustomerData;
import com.rbs.bdd.infrastructure.repository.CustomerRepository;
import com.rbs.bdd.util.ValidationUtils;
import com.rbsg.soa.c040paymentmanagement.arrvalidationforpayment.v01.ValidateArrangementForPaymentRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import org.springframework.ws.WebServiceMessage;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;
import com.rbs.bdd.util.ValidationUtils.RequestParams;
import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.IOException;
import java.io.InputStream;
import java.time.ZonedDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import static com.rbs.bdd.domain.enums.AccountStatus.DOMESTIC_RESTRICTED;
import static com.rbs.bdd.domain.enums.AccountStatus.DOMESTIC_UNRESTRICTED;
import static com.rbs.bdd.domain.enums.ModulusCheckStatus.FAILED;
import static com.rbs.bdd.domain.enums.ModulusCheckStatus.PASSED;
import static com.rbs.bdd.domain.enums.ServiceConstants.AccountTypes.INTL_BANK_ACCOUNT;
import static com.rbs.bdd.domain.enums.ServiceConstants.IBANs.*;
import static com.rbs.bdd.domain.enums.SwitchingStatus.NOT_SWITCHING;
import static com.rbs.bdd.domain.enums.SwitchingStatus.SWITCHED;
import static com.rbs.bdd.util.ValidationUtils.*;

/**
 * Service responsible for validating SOAP requests for account validation and returning
 * static success or error responses based on configured rules.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AccountValidationService implements AccountValidationPort {


    private final CustomerRepository repository;
    private final Environment environment;

    /**
     * Logs the fact that schema validation is already handled by Spring WS.
     */
    @Override
    public void validateSchema(ValidateArrangementForPaymentRequest request) {
        log.info("Schema validation completed by Spring WS");
    }



    /**
     * Applies business rule validation based on account identifiers, code values, and IBAN/UBAN checks.
     * Depending on the logic, either a static success or error response is returned.
     *
     * @param request the incoming SOAP request
     * @param message the SOAP response message to be modified
     */
    @Override
    public void validateBusinessRules(ValidateArrangementForPaymentRequest request, WebServiceMessage message) {
        try {
            log.info("TransactionID: {},Message: Starting business rule validation for request.",getTransactionId());
            RequestParams params = extractParams(request);
            Document responseDoc;
            XPath xpath = XPathFactory.newInstance().newXPath();
            //Check if transactionID is missing
            if (request.getRequestHeader() == null ||
                    request.getRequestHeader().getRequestIds() == null ||
                    request.getRequestHeader().getRequestIds().isEmpty() ||
                    request.getRequestHeader().getRequestIds().get(0).getTransactionId() == null ||
                    request.getRequestHeader().getRequestIds().get(0).getTransactionId().isBlank())
            {
                log.error("TransactionID: N/A, Message: Missing Transaction ID in the request.");
                ErrorDetail error = new ErrorDetail(
                        "ERR006",
                        "Unable to Complete Request",
                        "0060",
                        "Invalid Transaction Id"
                );
                 responseDoc =buildErrorResponse(error, params.originalTxnId(), xpath);
            }
            else {
                responseDoc = handleBusinessValidation(params, xpath);
            }

            writeResponseToSoapMessage(message,responseDoc);
            log.info("TransactionID: {},Message: Response sent Successfully",getTransactionId());

        } catch (Exception ex) {
            log.error("TransactionID: {},Message: Business rule validation failed",getTransactionId(), ex);
            throw new AccountValidationException("Validation failed", ex);
        }
    }


    public String getTransactionId(){
        return TransactionIdContext.get();
    }
    public Document handleBusinessValidation(RequestParams params, XPath xpath) throws ParserConfigurationException, IOException, SAXException, XPathExpressionException { log.debug("Checking for the error in the request");
        log.info("TransactionID: {},Message: Entered in handleBusinessValidation",getTransactionId());



        Optional<ErrorDetail> error = determineError(params);
        if (error.isPresent()) {
            return buildErrorResponse(error.get(), params.originalTxnId(), xpath);
        }

        // 1. Try DB match
        if (!isLocalEnvironment()){
            Optional<CustomerData> dbResult = repository.findByAccountNo(params.identifier());

            if (dbResult.isPresent() && dbResult.get().getAccountType().equals(params.codeValue())) {
                log.info("TransactionID: {},Message: Account matched in DB for IBAN: {}",getTransactionId(), params.identifier());
                String bankIdentifier = INTL_BANK_ACCOUNT.equals(dbResult.get().getAccountType()) ? resolveBankIdentifier(dbResult.get().getAccountNo()) : null;

                ResponseConfig config = new ResponseConfig(AccountStatus.valueOf(dbResult.get().getDomesticAccountType()),
                        SwitchingStatus.valueOf(dbResult.get().getSwitchingType()),
                                ModulusCheckStatus.valueOf(dbResult.get().getModulus()),
                        bankIdentifier);
                return buildSuccessResponse(params, config, xpath);}

        }

        // 2. Try hardcoded account match
        Optional<ResponseConfig> config = determineMatchingConfig(params);
        if (config.isPresent()) {
            return buildSuccessResponse(params, config.get(), xpath);
        }

        return buildErrorResponse(ErrorConstants.ERR_MOD97_IBAN.detail(), params.originalTxnId(), xpath);
    }

    public boolean isLocalEnvironment() {
        try {
            for (String profile : environment.getActiveProfiles()) {
                if ("local".equalsIgnoreCase(profile)) {
                    return true;
                }
            }
            return false;
        }
        catch(Exception ex)
        {
            log.debug("Exception with the Envrionment");
            return false;
        }
    }
    public Document buildErrorResponse(ErrorDetail detail, String txnId, XPath xpath)
            throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {
        log.info("TransactionID: {},Message: Building the error response",getTransactionId());
        Document errorDoc = loadAndParseXml(ServiceConstants.Paths.ACCOUNT_VALIDATION_ERROR_XML);
        applyErrorResponse(errorDoc, xpath, detail, txnId);
        return errorDoc;
    }

    public Document buildSuccessResponse(RequestParams params, ResponseConfig config, XPath xpath)
            throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {
        log.info("TransactionID: {},Message: Building the response",getTransactionId());

        Document successDoc = loadAndParseXml("static-response/account-validation/success-response.xml");

        if (INTL_BANK_ACCOUNT.equals(params.codeValue()) && config.bankIdentifier() == null) {
            log.error("TransactionID: {},Message: Wrong BankCode is there in the request ",getTransactionId());
            return buildErrorResponse(ErrorConstants.ERR_MOD97_IBAN.detail(), params.originalTxnId(), xpath);
        }
        log.info("TransactionID: {},Message: Successfully creating the response  ",getTransactionId());
        updateSuccessResponse(successDoc, xpath, config, params);
        return successDoc;
    }

    public String resolveBankIdentifier(String iban) {
        log.info("TransactionID: {},Message: Checking the Bank Identifier",getTransactionId());

        Map<String, String> BANK_CODES = Map.of(
                "NWB", "278",
                "RBS", "365",
                "UBN", "391"
        );
        if (iban == null || iban.isEmpty()) return null;
        return BANK_CODES.entrySet()
                .stream()
                .filter(entry -> iban.contains(entry.getKey()))
                .map(Map.Entry::getValue)
                .findFirst()
                .orElse(null);
    }


    /**
     * Extracts key fields like identifier, codeValue, transactionId, and systemId from the SOAP request.
     */
    public RequestParams extractParams(ValidateArrangementForPaymentRequest request) {
        log.info("TransactionID: {},Message: Fetching the account number ,transactionId and other information from request ",getTransactionId());
        String identifier = request.getArrangementIdentifier().getIdentifier();
        String codeValue = request.getArrangementIdentifier().getContext().getCodeValue();
        String txnId = request.getRequestHeader().getRequestIds().get(0).getTransactionId();
        String systemId = request.getRequestHeader().getRequestIds().get(0).getSystemId();
        log.debug("TransactionID: {},Message: Extracted request parameters: identifier={}, codeValue={}, txnId={}, systemId={}",
                getTransactionId() ,identifier, codeValue, txnId, systemId);
        return new RequestParams(identifier, codeValue, txnId, systemId);
    }

    /**
     * Validates error conditions such as invalid IBAN/UBAN format or mismatched values.
     */
    public Optional<ErrorDetail> determineError(RequestParams p) {
        log.info("TransactionID: {},Message: Entered in determineError",getTransactionId());
        Map<ValidationErrorType, ErrorDetail> errorMap = Map.of(
                ValidationErrorType.INVALID_PREFIX, ErrorConstants.ERR_DB2_SQL.detail(),
                ValidationErrorType.INVALID_IBAN_LENGTH, ErrorConstants.ERR_INVALID_IBAN_LENGTH.detail(),
                ValidationErrorType.INVALID_UBAN_LENGTH, ErrorConstants.ERR_INVALID_UBAN_LENGTH.detail(),
                ValidationErrorType.INVALID_MODULUS, ErrorConstants.ERR_MOD97_UBAN.detail(),
                ValidationErrorType.INVALID_COUNTRY_CODE , ErrorConstants.ERR_WRONG_COUNTRY_CODE.detail()
        );

        return ValidationUtils.validateAccount(p, errorMap, this::isUbanValid, "AccountValidation");
    }

    /**
     * Matches the request against known account types and configurations.
     */
    public Optional<ResponseConfig> determineMatchingConfig(RequestParams p) {
        log.info("TransactionID: {},Message: Entering in determineMatchingConfig ",getTransactionId());
        log.debug("TransactionID: {},Message: Entering in determineMatchingConfig "+p.codeValue(),getTransactionId());
        String bankIdentifier = INTL_BANK_ACCOUNT.equals(p.codeValue()) ? resolveBankIdentifier(p.identifier()) : null;
        log.info("TransactionID: {},Message: The Bank identifier is "+bankIdentifier,getTransactionId());
        Map<String, ResponseConfig> ruleMap = Map.of(
        IBAN_1, new ResponseConfig(DOMESTIC_RESTRICTED, SWITCHED, PASSED,bankIdentifier),
        IBAN_2, new ResponseConfig(DOMESTIC_RESTRICTED, NOT_SWITCHING, PASSED,bankIdentifier),
        IBAN_3, new ResponseConfig(DOMESTIC_UNRESTRICTED, SWITCHED, PASSED,bankIdentifier),
        IBAN_4, new ResponseConfig(DOMESTIC_UNRESTRICTED, NOT_SWITCHING, FAILED,bankIdentifier)

    );

    return ruleMap.entrySet().stream()
        .filter(e -> isMatch(p, e.getKey()))
        .findFirst()
        .map(Map.Entry::getValue)
        .map(Optional::of)
        .orElse(Optional.empty());

    }

    /**
     * Checks if the request identifier matches exactly or by suffix.
     */
    public boolean isMatch(RequestParams p, String account) {
        return p.identifier().equals(account) || extractLast14Digits(account).equals(p.identifier());
    }

    /**
     * Verifies if the given UBAN matches the suffix of known IBANs.
     */
    public boolean isUbanValid(String identifier) {
        log.info("TransactionID: {},Message: Checking if the UBAN is valid ",getTransactionId());
        return ServiceConstants.IBANs.ALL_IBANS.stream()
                .map(this::extractLast14Digits)
                .anyMatch(ibanSuffix -> ibanSuffix.equals(identifier));
    }

    /**
     * Extracts last 14 digits from a given IBAN string.
     */
    public String extractLast14Digits(String iban) {
        log.debug("TransactionID: {},Message: Extract the last 14 digits from IBAN number",getTransactionId());
        return iban.length() >= 14 ? iban.substring(iban.length() - 14) : "";
    }

    /**
     * Reads and parses a static XML file from the classpath.
     */
    public Document loadAndParseXml(String path) throws ParserConfigurationException, IOException, SAXException {
        log.debug("TransactionID: {},Message: Loading XML from path: {}",getTransactionId(), path);
        InputStream xml = getClass().getClassLoader().getResourceAsStream(path);
        if (Objects.isNull(xml)) {
            log.error("TransactionID: {},Message: XML file not found at path: {}",getTransactionId(), path);
            throw new AccountValidationException("XML not found: " + path);
        }

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
        factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        factory.setFeature("http://xml.org/sax/features/external-general-entities", false);
        factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        factory.setXIncludeAware(false);
        factory.setExpandEntityReferences(false);
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.parse(xml);
    }

    /**
     * Populates values in the success response based on matched config.
     */
    public void updateSuccessResponse(Document doc, XPath xpath, ResponseConfig config, RequestParams p) throws XPathExpressionException {
        log.info("TransactionID: {},Message: Started Updating the response XML with success values",getTransactionId());
        updateText(xpath, doc, "//responseId/systemId", p.systemId());
        updateText(xpath, doc, "//responseId/transactionId", generateTxnId());
        updateText(xpath, doc, "//status", config.accountStatus.getValue());
        updateText(xpath, doc, "//switchingStatus", config.switchingStatus.getValue());
        updateText(xpath, doc, "//modulusCheckStatus/codeValue", config.modulusCheckStatus.getValue());
        if(config.bankIdentifier()!=null)
        {
            updateText(xpath, doc, "//parentOrganization/alternativeIdentifier/identifier",config.bankIdentifier());

        }
        log.info("TransactionID: {},Message: Updated response XML with success values",getTransactionId());
    }

    /**
     * Populates values in the static error response XML.
     */
    public void applyErrorResponse(Document doc, XPath xpath, ErrorDetail errorDetail, String txnId) throws XPathExpressionException {
        log.info("TransactionID: {},Message: Entered in applyErrorResponse",getTransactionId());
        updateText(xpath, doc, ServiceConstants.XPath.XPATH_RESPONSE_ID_TXN_ID, generateTxnId());
        updateText(xpath, doc, ServiceConstants.XPath.XPATH_REF_REQUEST_TXN_ID, txnId);
        updateText(xpath, doc, ServiceConstants.XPath.XPATH_CMD_STATUS, "Failed");
        updateText(xpath, doc, ServiceConstants.XPath.XPATH_CMD_DESCRIPTION, errorDetail.description());
        updateText(xpath, doc, ServiceConstants.XPath.XPATH_TIMESTAMP, ZonedDateTime.now().toString());
        updateText(xpath, doc, ServiceConstants.XPath.XPATH_RETURN_CODE, errorDetail.returnCode());
        if (Objects.nonNull(errorDetail.systemNotificationDesc())) {

            updateText(xpath, doc, ServiceConstants.XPath.XPATH_SYS_NOTIFICATION_DESC, errorDetail.systemNotificationDesc());
            updateText(xpath, doc, ServiceConstants.XPath.XPATH_SYS_NOTIFICATION_CODE, errorDetail.systemNotificationCode());
        } else {

            Node node = (Node) xpath.evaluate(ServiceConstants.XPath.XPATH_SYS_NOTIFICATION_BLOCK, doc, XPathConstants.NODE);
            if (node != null && node.getParentNode() != null) {
                node.getParentNode().removeChild(node);
                log.debug("TransactionID: {},Message: Removed systemNotification block as it was not applicable.",getTransactionId());
            }
        }
        log.error("TransactionID: {},Message: Updated response XML with error values: {}",getTransactionId(), errorDetail.description());
    }

    /**
     * Utility method to update a specific XML node’s text content.
     */
    public void updateText(XPath xpath, Document doc, String path, String value) throws XPathExpressionException {
        Node node = (Node) xpath.evaluate(path, doc, XPathConstants.NODE);
        if (node != null && value != null) {
            node.setTextContent(value);
            log.debug("TransactionID: {},Message: Updated XML node {} with value {}",getTransactionId() ,path, value);
        }
    }



    /**
     * Immutable container representing a valid account configuration.
     * this record is left without methods or additional logic,as it is only
     * used to group and transport validation results such as
     * <ul>
     *     <li>{@code accountStatus} - the classification of the account(eg , restricted,unrestricted)</li>
     *      <li>{@code switchingStatus} - whether the account has been switched or not switching </li>
     *       <li>{@code modulusStatus} - result of modulus check </li>
     *       <li>{@code bankIdentifier} - result of bankIdentifier </li>
     * </ul>
     */
     @SuppressWarnings("unused")
    public record ResponseConfig(AccountStatus accountStatus, SwitchingStatus switchingStatus,ModulusCheckStatus modulusCheckStatus,String bankIdentifier ) {
     // this record is left without methods or additional logic,as it is only used to group and transport validation results
     }



}


-----
package com.rbs.bdd.domain.enums;

/**
 * Enum representing the result of modulus check validation.
 */
public enum ModulusCheckStatus {
    PASSED("Passed"),
    FAILED("Failed");

    private final String value;

    ModulusCheckStatus(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}


----
package com.rbs.bdd.domain.enums;


/**
 * Enum representing the status of the accounting unit.
 */
public enum AccountStatus {
    DOMESTIC_RESTRICTED("Domestic - Restricted"),
    DOMESTIC_UNRESTRICTED("Domestic - Unrestricted");

    private final String value;

    AccountStatus(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}


----
package com.rbs.bdd.domain.enums;


/**
 * Enum representing switching status of the arrangement.
 */
public enum SwitchingStatus {
    SWITCHED("Switched"),
    NOT_SWITCHING("Not Switching");

    private final String value;

    SwitchingStatus(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }
}
