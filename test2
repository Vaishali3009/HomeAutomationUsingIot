import org.springframework.core.env.Environment;

@RequiredArgsConstructor
@Service
@Slf4j
public class CustomerRetrievalService implements RetrieveCustomerPort {

    private final CustomerRepository repository;
    private final Environment environment;

    private boolean isLocalEnvironment() {
        for (String profile : environment.getActiveProfiles()) {
            if ("local".equalsIgnoreCase(profile)) {
                return true;
            }
        }
        return false;
    }

    private Document handleCustomerRetrieval(RequestParams params, XPath xpath)
            throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {

        // üîç Error validation logic
        Optional<ErrorDetail> error = determineCustomerRetrievalError(params);
        if (error.isPresent()) {
            return buildErrorResponse(error.get(), xpath, params.originalTxnId(),
                    ServiceConstants.Paths.ERROR_XML_PATH_FOR_CUSTOMER_RETRIEVAL);
        }

        // ‚úÖ Bypass DB in local environment
        if (!isLocalEnvironment()) {
            Optional<CustomerData> dbResult = repository.findByAccountNo(params.identifier());
            if (dbResult.isPresent() && dbResult.get().getAccountType().equals(params.codeValue())) {
                CustomerInfo customer = new CustomerInfo(
                        dbResult.get().getPrefixType(),
                        dbResult.get().getFirstName(),
                        dbResult.get().getLastName());
                return buildSuccessResponse(xpath, customer);
            }
        }

        // üîç Fall back to hardcoded config match
        CustomerNameMapping matched = CustomerNameMapping.fromIdentifier(params.identifier());
        if (matched != null) {
            CustomerInfo customer = new CustomerInfo(
                    matched.getPrefixType(),
                    matched.getFirstName(),
                    matched.getLastName());
            return buildSuccessResponse(xpath, customer);
        }

        return buildErrorResponse(ErrorConstants.ERR_CUSTOMER_NOT_FOUND.detail(), xpath, params.originalTxnId(),
                ServiceConstants.Paths.ACCOUNT_VALIDATION_ERROR_XML);
    }
}
