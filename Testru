package com.rbs.bdd.application.awsconfig;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;

@Slf4j
@Configuration
public class AwsSecretManagerConfig {

    @Bean
    @ConditionalOnProperty(name = "secret.manager.enabled", havingValue = "true")
    public SecretsManagerClient secretsManagerClient(@Value("${aws.region}") String region,
                                                     @Value("${secret.datasource.name}") String secretDatasourceName) {
        log.info("AWS-AWS_REGION {}", region);
        SecretsManagerClient client = SecretsManagerClient.builder()
                .region(Region.of(region))
                .credentialsProvider(DefaultCredentialsProvider.create())
                .build();
        log.info("Verify access");
        log.info("Secret DatasourceName "+secretDatasourceName);

        GetSecretValueRequest request = GetSecretValueRequest.builder()
                .secretId(secretDatasourceName)
                .build();

        log.info("Trying to establish"+secretDatasourceName);

        try {
            log.error("Request"+request);
            GetSecretValueResponse response = client.getSecretValue(request);
            log.error("Trying to establish");
            if (response.sdkHttpResponse().isSuccessful()) {
                log.info("aws secret retrieved [{}] successfully [{}]", secretDatasourceName,
                        response.secretString());
            }
        } catch (Exception u) {
            log.error("Unable to get the secret", u);
        }
        return client;
    }
}



-----------------
package com.rbs.bdd.application.awsconfig;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.rbs.bdd.application.exception.SecretsNotFoundException;
import com.zaxxer.hikari.HikariDataSource;
import liquibase.integration.spring.SpringLiquibase;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import software.amazon.awssdk.services.secretsmanager.SecretsManagerClient;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;
import software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;
import software.amazon.awssdk.services.secretsmanager.model.SecretsManagerException;

import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Configuration
@ConditionalOnProperty(name = "secret.manager.enabled", havingValue = "true")

public class DatabaseConfig {
    private final ObjectMapper mapper = new ObjectMapper();

    @Value("${spring.datasource.base.url}")
    private String springDatasourceBaseUrl;

    @Value("${spring.datasource.username}")
    private String springDatasourceUsername;

    @Value("${spring.datasource.password}")
    private String springDatasourcePassword;

    @Value("${spring.liquibase.default-schema}")
    private String springLiquibaseDefaultSchema;

    @Value("${secret.datasource.name}")
    private String secretDatasourceName;

    @Autowired(required = false)
    private SecretsManagerClient secretsManagerClient;


    private static final String USERNAME = "username";
    private static final String PASSWORD = "password";
    private static final String DBNAME = "dbname";

    //Fetch kubernetes secrets from the aws server
    private Map<String, String> fetchSecrets(final SecretsManagerClient secretsManagerClient, final String secretName) {

        log.debug("Request received to retrieve secrets for  : {}", secretName);
        Map<String, String> secretMap = new HashMap<>();
        GetSecretValueRequest request = GetSecretValueRequest.builder().secretId(secretName).build();

        GetSecretValueResponse response = secretsManagerClient.getSecretValue(request);
        if (response.sdkHttpResponse().isSuccessful()) {
            log.info("Secret retrieved for [{}] ", secretName);
            try {
                secretMap = mapper.readValue(response.secretString(), Map.class);
                log.info("SecretMap: Username: {}", secretMap.get(USERNAME));
            } catch (Exception e) {
                log.error("unable to retrieve data from secret");
                throw new SecretsNotFoundException("Unable to retrieve data from secrets!");
            }
        }
        return secretMap;
    }

    @ConfigurationProperties(prefix = "spring.datasource")
    @ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", havingValue = "true")

    @Bean
    public DataSourceProperties dataSourceProperties() {
        return new DataSourceProperties();
    }

    @Primary
    @ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", havingValue = "true")
    @Bean
    public DataSource dataSource() {
        Map<String, String> secrets = fetchSecrets(secretsManagerClient, secretDatasourceName);
        HikariDataSource hikariDataSource = new HikariDataSource();
        log.debug("Using aws secretDatasource : {} and  secretsManagerClient: {}", secretDatasourceName, secretsManagerClient);

        hikariDataSource.setJdbcUrl(springDatasourceBaseUrl + secrets.get(DBNAME));
        log.debug("Connecting to Datasource : {} ", hikariDataSource.getJdbcUrl());
        log.debug("Secrets are available for user : {} ", secrets.get(USERNAME));

        hikariDataSource.setUsername(secrets.get(USERNAME));
        hikariDataSource.setPassword(secrets.get(PASSWORD));
        return hikariDataSource;
    }

    @ConditionalOnProperty(prefix = "spring.liquibase", name = "enabled", havingValue = "true")
    @Bean

    public SpringLiquibase SpringLiquibase() {
        SpringLiquibase springLiquibase=null;
        try {
            Map<String, String> secrets = fetchSecrets(secretsManagerClient, secretDatasourceName);
             springLiquibase = new SpringLiquibase();
            springLiquibase.setDataSource(dataSource());
            log.info("DBNAME :" + DBNAME);
            log.info("secretsManagerClient : " + secretsManagerClient);
            log.info("secretDatasourceName :" + secretDatasourceName);
            springLiquibase.setDefaultSchema(secrets.get(DBNAME));
            log.info("Default Scehma :" + springLiquibase.getDefaultSchema());

            springLiquibase.setChangeLog("classpath:/db/changelog/db.changelog-master.yaml");
            springLiquibase.setContexts("");
            return springLiquibase;
        }
        catch(Exception ex)
        {
            log.error("error occured : "+ex);
        }
        return springLiquibase;
    }

}
