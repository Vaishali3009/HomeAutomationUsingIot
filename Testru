import org.springframework.core.env.Environment;

private final Environment environment;

@RequiredArgsConstructor
@Service
public class CustomerRetrievalService implements RetrieveCustomerPort {
    private final CustomerRepository repository;
    private final Environment environment;
    ...
}

private boolean isLocalEnvironment() {
    String[] activeProfiles = environment.getActiveProfiles();
    for (String profile : activeProfiles) {
        if ("local".equalsIgnoreCase(profile)) {
            return true;
        }
    }
    return false;
}



// 1. Check hardcoded account match first
CustomerNameMapping matched = CustomerNameMapping.fromIdentifier(params.identifier());
if (matched != null) {
    logger.info("TransactionID: {},Message: Account matched in config list for IBAN: {}", getTransactionId(), params.identifier());
    CustomerInfo customer = new CustomerInfo(
            matched.getPrefixType(),
            matched.getFirstName(),
            matched.getLastName());
    return buildSuccessResponse(xpath, customer);
}

// 2. Try DB match only in SIT or DEV (not local)
if (!isLocalEnvironment()) {
    Optional<CustomerData> dbResult = repository.findByAccountNo(params.identifier());
    if (dbResult.isPresent() && dbResult.get().getAccountType().equals(params.codeValue())) {
        logger.info("TransactionID: {},Message: Account matched in DB for IBAN: {}", getTransactionId(), params.identifier());
        CustomerInfo customer = new CustomerInfo(
                dbResult.get().getPrefixType(),
                dbResult.get().getFirstName(),
                dbResult.get().getLastName());
        return buildSuccessResponse(xpath, customer);
    }
} else {
    logger.warn("Skipping DB check in local environment.");
}


