/**
 * Dynamically updates or removes fields inside <refRequestIds> block based on the <requestIds> content.
 */
private void handleRefRequestIds(Document errorDoc, Document requestDoc, String txnId, String systemId) {
    NodeList requestIdNodes = requestDoc.getElementsByTagNameNS("*", "requestIds");
    Node refRequestIds = getNode(errorDoc, "refRequestIds");

    boolean foundRequestIDSystemId = false;
    boolean hasTxnId = false;
    boolean hasSystemId = false;

    for (int i = 0; i < requestIdNodes.getLength(); i++) {
        Node requestIdsNode = requestIdNodes.item(i);
        NodeList children = requestIdsNode.getChildNodes();

        String currentSystemId = null;
        boolean txnIdPresent = false;
        boolean systemIdPresent = false;

        for (int j = 0; j < children.getLength(); j++) {
            Node child = children.item(j);
            if ("systemId".equals(child.getLocalName())) {
                currentSystemId = child.getTextContent();
                systemIdPresent = true;
            } else if ("transactionId".equals(child.getLocalName())) {
                txnIdPresent = true;
            }
        }

        if ("RequestID".equals(currentSystemId)) {
            foundRequestIDSystemId = true;
            hasTxnId = txnIdPresent;
            hasSystemId = systemIdPresent;
            break;
        }
    }

    if (refRequestIds != null) {
        if (!foundRequestIDSystemId) {
            // No matching <requestIds> with systemId=RequestID â†’ remove entire block
            refRequestIds.getParentNode().removeChild(refRequestIds);
        } else {
            // Remove missing child nodes
            if (!hasTxnId) removeNode(refRequestIds, "transactionId");
            if (!hasSystemId) removeNode(refRequestIds, "systemId");

            // If nothing left inside, remove the entire block
            if (!refRequestIds.hasChildNodes()) {
                refRequestIds.getParentNode().removeChild(refRequestIds);
            }
        }
    }
}
