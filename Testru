package com.rbs.bdd.domain.enums;

import java.util.List;

/**
 * Enum container for grouping constants related to service configuration, IBAN validation, file paths, and XPath expressions.
 * Constants are organized as nested interfaces for better readability and modular access.
 */
public enum ServiceConstants {
    // Empty enum just to hold grouped constants via nested interfaces
    ;

    /**
     * File paths for static response and error XMLs.
     */
    public interface Paths {
        String ERROR_XML_PATH = "error-response/error-response.xml";
        String SCHEMA_VALIDATION_ERROR_XML = "error-response/CustomerRetrievalSchemaValidationError.xml";
        String RESPONSE_XML_PATH = "static-response/account-validation/success-response.xml";
    }

    /**
     * Namespace URIs used in Spring WS handlers for request mapping.
     */
    public interface Namespaces {
        String NAMESPACE_URI_FOR_ACCOUNT_VALIDATION = "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/";
        String NAMESPACE_URI_FOR_CUSTOMER_RETRIEVAL = "http://com/rbsg/soa/C040PaymentManagement/CustomerRetrievalForPayment/V01/ServiceParameters/V01/";
    }

    /**
     * Static IBANs used for known test scenarios.
     */
    public interface IBANs {
        String IBAN_1 = "GB29NWBK60161331926801";
        String IBAN_2 = "GB82WEST12345698765437";
        String IBAN_3 = "GB94BARC10201530093422";
        String IBAN_4 = "GB33BUKB20201555555567";

        List<String> ALL_IBANS = List.of(
                IBAN_1, IBAN_2, IBAN_3, IBAN_4
        );
    }

    /**
     * Code values used to distinguish between IBAN and UBAN.
     */
    public interface AccountTypes {
        String INTL_BANK_ACCOUNT = "InternationalBankAccountNumber";
        String UK_BASIC_BANK_ACCOUNT = "UKBasicBankAccountNumber";
    }

    /**
     * XPath expressions for extracting and updating SOAP request/response values.
     */
    public interface XPath {
        String XPATH_TRANSACTION_ID = "//*[local-name()='transactionId']";
        String XPATH_FIRST_NAME = "//*[local-name()='hasInvolvedPartyAssociation']" +
                "/*[local-name()='associatedInvolvedParty']" +
                "/*[local-name()='hasForName']/*[local-name()='firstName']";
        String XPATH_PREFIX_TYPE = "//*[local-name()='hasInvolvedPartyAssociation']" +
                "/*[local-name()='associatedInvolvedParty']" +
                "/*[local-name()='hasForName']/*[local-name()='prefixTitle']/*[local-name()='codeValue']";
        String XPATH_LAST_NAME = "//*[local-name()='hasInvolvedPartyAssociation']" +
                "/*[local-name()='associatedInvolvedParty']" +
                "/*[local-name()='hasForName']/*[local-name()='lastName']";
        String XPATH_ACCOUNT_STATUS = "//*[local-name()='accountingUnits']/*[local-name()='status']/*[local-name()='codeValue']";
        String XPATH_SWITCHING_STATUS = "//*[local-name()='switchingStatus']/*[local-name()='codeValue']";
        String XPATH_MODULUS_STATUS = "//*[local-name()='modulusCheckStatus']/*[local-name()='codeValue']";

        // Fault-specific
        String XPATH_FAULT_TRANSACTION_ID = "//*[local-name()='refRequestIds']/*[local-name()='transactionId']";
        String XPATH_FAULT_RESPONSE_ID = "//*[local-name()='responseId']";
        String XPATH_FAULT_TIMESTAMP = "//*[local-name()='timestamp']";
    }

    /**
     * Common tag names.
     */
    public interface Tags {
        String TAG_TRANSACTION_ID = "transactionId";
    }
}

---------------------
package com.rbs.bdd.domain.enums;
import com.rbs.bdd.domain.model.ErrorDetail;
import com.rbs.bdd.domain.model.ErrorDetail;

/**
 * Enum representing predefined error types for validation responses.
 * Each constant wraps an {@link ErrorDetail} object with metadata used for SOAP fault construction.
 */
public enum ErrorConstants {

    ERR_INVALID_IBAN_LENGTH(new ErrorDetail("ERR006", "Length of IBAN is Invalid", "0013", "Length of IBAN is Invalid")),

    ERR_DB2_SQL(new ErrorDetail("ERR006", "500|Service GRPUB.OA_GET_SORTCODE_DETAILS...(OA2.2105271236)...", null, null)),

    ERR_WRONG_COUNTRY_CODE(new ErrorDetail("0010", "Country code is not found in Db, try  with the correct country code", null, null)),

    ERR_MOD97_IBAN(new ErrorDetail("ERROO6", "MOD97 failure for the IBAN", "0020", "MOD97 failure for the IBAN")),

    ERR_INVALID_UBAN_LENGTH(new ErrorDetail("ERROO6", "UBAN should be 14 digits", "0013", "UBAN should be 14 digits")),

    ERR_MOD97_UBAN(new ErrorDetail("ERROO6", "MOD97 failure for the UBAN", "0020", "MOD97 failure for the UBAN"));

    private final ErrorDetail detail;

    ErrorConstants(ErrorDetail detail) {
        this.detail = detail;
    }

    /**
     * Returns the {@link ErrorDetail} wrapped in this constant.
     */
    public ErrorDetail detail() {
        return detail;
    }
}

-------------
In the service class XPATH_RESPONSE_ID_TXN_ID,XPATH_REF_REQUEST_TXN_ID and other are not resolved 

 private void applyErrorResponse(Document doc, XPath xpath, ErrorDetail errorDetail, String txnId) throws XPathExpressionException {
        updateText(xpath, doc, ErrorConstants.XPATH_RESPONSE_ID_TXN_ID, generateTxnId());
        updateText(xpath, doc, ErrorConstants.XPATH_REF_REQUEST_TXN_ID, txnId);
        updateText(xpath, doc, ErrorConstants.XPATH_CMD_STATUS, "Failed");
        updateText(xpath, doc, ErrorConstants.XPATH_CMD_DESCRIPTION, errorDetail.description());
        updateText(xpath, doc, ErrorConstants.XPATH_TIMESTAMP, ZonedDateTime.now().toString());
        updateText(xpath, doc, ErrorConstants.XPATH_RETURN_CODE, errorDetail.returnCode());
        if (Objects.nonNull(errorDetail.systemNotificationDesc())) {
            updateText(xpath, doc, ErrorConstants.XPATH_SYS_NOTIFICATION_DESC, errorDetail.systemNotificationDesc());
            updateText(xpath, doc, ErrorConstants.XPATH_SYS_NOTIFICATION_CODE, errorDetail.returnCode());
        } else {
            Node node = (Node) xpath.evaluate(ErrorConstants.XPATH_SYS_NOTIFICATION_BLOCK, doc, XPathConstants.NODE);
            if (node != null && node.getParentNode() != null) {
                node.getParentNode().removeChild(node);
                log.debug("Removed systemNotification block as it was not applicable.");
            }
        }
        log.info("Updated response XML with error values: {}", errorDetail.description());
    }
