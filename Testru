/**
 * Handles removal of <refRequestIds> node from errorDoc if <requestIds> block
 * with systemId="RequestID" is missing or incomplete in the requestDoc.
 *
 * @param errorDoc   The SOAP error response document.
 * @param requestDoc The original request document.
 */
public static void handleRefRequestIds(Document errorDoc, Document requestDoc) {
    NodeList requestIdNodes = requestDoc.getElementsByTagNameNS("*", "requestIds");
    Node refRequestIds = SoapInterceptorUtils.getNode(errorDoc, "refRequestIds");

    boolean isValid = containsValidRequestIdBlock(requestIdNodes);
    if (!isValid && refRequestIds != null && refRequestIds.getParentNode() != null) {
        refRequestIds.getParentNode().removeChild(refRequestIds);
    }
}


------
private static boolean containsValidRequestIdBlock(NodeList requestIdNodes) {
    for (int i = 0; i < requestIdNodes.getLength(); i++) {
        Node requestIdsNode = requestIdNodes.item(i);
        if (isRequestIdBlockValid(requestIdsNode)) {
            return true;
        }
    }
    return false;
}


-----
private static boolean isRequestIdBlockValid(Node requestIdsNode) {
    NodeList children = requestIdsNode.getChildNodes();
    String systemIdValue = null;
    boolean hasTxnId = false;
    boolean hasSystemId = false;

    for (int i = 0; i < children.getLength(); i++) {
        Node child = children.item(i);
        String tag = child.getLocalName();

        if (SYSTEM_ID.equals(tag)) {
            systemIdValue = child.getTextContent();
            hasSystemId = true;
        } else if (TAG_TRANSACTION_ID.equals(tag)) {
            hasTxnId = true;
        }
    }

    return "RequestID".equals(systemIdValue) && hasTxnId && hasSystemId;
}


-----
