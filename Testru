package com.rbs.bdd.infrastructure.soap.interceptor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.EndpointInterceptor;
import org.springframework.ws.soap.SoapMessage;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;

public class TransactionIdInterceptor implements EndpointInterceptor {

    private static final Logger log = LoggerFactory.getLogger(TransactionIdInterceptor.class);

    @Override
    public boolean handleRequest(MessageContext messageContext, Object endpoint) throws Exception {
        log.info("TransactionIdInterceptor - Handling request");

        SoapMessage soapRequest = (SoapMessage) messageContext.getRequest();
        Source source = soapRequest.getPayloadSource();

        // === Your requested logic ===
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        transformer.transform(source, new StreamResult(out));
        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(in);

        // Now `document` holds the parsed SOAP payload as a DOM object
        // You can proceed to extract `transactionId`, `systemId`, etc. from the document
        String transactionId = document.getElementsByTagName("transactionId").item(0).getTextContent();
        log.info("Extracted transactionId: {}", transactionId);

        return true; // Continue processing
    }

    @Override
    public boolean handleResponse(MessageContext messageContext, Object endpoint) {
        return true;
    }

    @Override
    public boolean handleFault(MessageContext messageContext, Object endpoint) {
        return true;
    }

    @Override
    public void afterCompletion(MessageContext messageContext, Object endpoint, Exception ex) {
        // Cleanup or logging if needed
    }
}





---------------


package com.rbs.bdd.infrastructure.soap.interceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.EndpointInterceptor;
import org.springframework.ws.soap.SoapMessage;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;

public class TransactionIdInterceptor implements EndpointInterceptor {

    private static final Logger log = LoggerFactory.getLogger(TransactionIdInterceptor.class);

    @Override
    public boolean handleRequest(MessageContext messageContext, Object endpoint) throws Exception {
        log.debug("TransactionIdInterceptor - Handling request");

        SoapMessage soapRequest = (SoapMessage) messageContext.getRequest();
        Source source = soapRequest.getPayloadSource();

        // === Your requested logic ===
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        transformer.transform(source, new StreamResult(out));
        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());

        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(in);

        // Now `document` holds the parsed SOAP payload as a DOM object
        // You can proceed to extract `transactionId`, `systemId`, etc. from the document
        String transactionId = document.getElementsByTagName("transactionId").item(0).getTextContent();
        log.debug("Extracted transactionId: {}", transactionId);

        return true; // Continue processing
    }

    @Override
    public boolean handleResponse(MessageContext messageContext, Object endpoint) {
        return true;
    }

    @Override
    public boolean handleFault(MessageContext messageContext, Object endpoint) {
        return true;
    }

    @Override
    public void afterCompletion(MessageContext messageContext, Object endpoint, Exception ex) {
        // Cleanup or logging if needed
    }
}


-------
