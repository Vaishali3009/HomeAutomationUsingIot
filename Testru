package com.rbs.bdd.infrastructure.soap.interceptor;

import com.rbs.bdd.util.SoapInterceptorUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.ws.context.MessageContext;
import org.xml.sax.SAXParseException;

import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class AccountSchemaValidationInterceptorTest {

    private AccountSchemaValidationInterceptor interceptor;
    private MessageContext mockMessageContext;

    @BeforeEach
    void setUp() {
        interceptor = new AccountSchemaValidationInterceptor();
        mockMessageContext = mock(MessageContext.class);
    }

    @Test
    void testHandleRequest_skipsInterceptorIfNamespaceNotMatched() throws Exception {
        try (MockedStatic<SoapInterceptorUtils> utilities = mockStatic(SoapInterceptorUtils.class)) {
            utilities.when(() -> SoapInterceptorUtils
                    .skipInterceptorIfNamespaceNotMatched(any(), any()))
                    .thenReturn(true);

            boolean result = interceptor.handleRequest(mockMessageContext, new Object());
            assertTrue(result);

            utilities.verify(() -> SoapInterceptorUtils.skipInterceptorIfNamespaceNotMatched(mockMessageContext, "http://com/rbsg/soa/C040PaymentManagement/ArrValidationForPayment/V01/ServiceParameters/V01/"));
        }
    }

    @Test
    void testHandleRequest_callsSuperWhenNamespaceMatched() throws Exception {
        try (MockedStatic<SoapInterceptorUtils> utilities = mockStatic(SoapInterceptorUtils.class)) {
            utilities.when(() -> SoapInterceptorUtils
                    .skipInterceptorIfNamespaceNotMatched(any(), any()))
                    .thenReturn(false);

            AccountSchemaValidationInterceptor interceptorSpy = spy(interceptor);
            doReturn(true).when((PayloadValidatingInterceptor) interceptorSpy)
                    .handleRequest(mockMessageContext, new Object());

            boolean result = interceptorSpy.handleRequest(mockMessageContext, new Object());
            assertTrue(result);
        }
    }

    @Test
    void testHandleRequestValidationErrors_callsErrorHandling() {
        SAXParseException[] errors = new SAXParseException[0];

        try (MockedStatic<SoapInterceptorUtils> utilities = mockStatic(SoapInterceptorUtils.class)) {
            utilities.when(() -> SoapInterceptorUtils
                    .handleSchemaValidationErrors(any(), anyString(), anyString()))
                    .thenReturn(false);

            boolean result = interceptor.handleRequestValidationErrors(mockMessageContext, errors);
            assertFalse(result);

            utilities.verify(() ->
                    SoapInterceptorUtils.handleSchemaValidationErrors(mockMessageContext,
                            "static-response/error/account-validation/schemaValidationError.xml", "accountValidation"));
        }
    }

    @Test
    void testGetClassLoaderResource_returnsStream() {
        InputStream stream = interceptor.getClassLoaderResource("logback-test.xml");
        assertNotNull(stream);
    }
}




package com.rbs.bdd.infrastructure.soap.interceptor;

import com.rbs.bdd.util.SoapInterceptorUtils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.ws.context.MessageContext;
import org.xml.sax.SAXParseException;

import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CustomerSchemaValidationInterceptorTest {

    private CustomerSchemaValidationInterceptor interceptor;
    private MessageContext mockMessageContext;

    @BeforeEach
    void setUp() {
        interceptor = new CustomerSchemaValidationInterceptor();
        mockMessageContext = mock(MessageContext.class);
    }

    @Test
    void testHandleRequest_skipsInterceptorIfNamespaceNotMatched() throws Exception {
        try (MockedStatic<SoapInterceptorUtils> utilities = mockStatic(SoapInterceptorUtils.class)) {
            utilities.when(() -> SoapInterceptorUtils
                    .skipInterceptorIfNamespaceNotMatched(any(), any()))
                    .thenReturn(true);

            boolean result = interceptor.handleRequest(mockMessageContext, new Object());
            assertTrue(result);

            utilities.verify(() -> SoapInterceptorUtils.skipInterceptorIfNamespaceNotMatched(mockMessageContext, "http://com/rbsg/soa/C040PaymentManagement/CustomerRetrievalForPayment/V01/ServiceParameters/V01/"));
        }
    }

    @Test
    void testHandleRequest_callsSuperWhenNamespaceMatched() throws Exception {
        try (MockedStatic<SoapInterceptorUtils> utilities = mockStatic(SoapInterceptorUtils.class)) {
            utilities.when(() -> SoapInterceptorUtils
                    .skipInterceptorIfNamespaceNotMatched(any(), any()))
                    .thenReturn(false);

            CustomerSchemaValidationInterceptor interceptorSpy = spy(interceptor);
            doReturn(true).when((PayloadValidatingInterceptor) interceptorSpy)
                    .handleRequest(mockMessageContext, new Object());

            boolean result = interceptorSpy.handleRequest(mockMessageContext, new Object());
            assertTrue(result);
        }
    }

    @Test
    void testHandleRequestValidationErrors_callsErrorHandling() {
        SAXParseException[] errors = new SAXParseException[0];

        try (MockedStatic<SoapInterceptorUtils> utilities = mockStatic(SoapInterceptorUtils.class)) {
            utilities.when(() -> SoapInterceptorUtils
                    .handleSchemaValidationErrors(any(), anyString(), anyString()))
                    .thenReturn(false);

            boolean result = interceptor.handleRequestValidationErrors(mockMessageContext, errors);
            assertFalse(result);

            utilities.verify(() ->
                    SoapInterceptorUtils.handleSchemaValidationErrors(mockMessageContext,
                            "static-response/error/account-validation/schemaValidationError.xml", "customerRetrieval"));
        }
    }

    @Test
    void testGetClassLoaderResource_returnsStream() {
        InputStream stream = interceptor.getClassLoaderResource("logback-test.xml");
        assertNotNull(stream);
    }
}
