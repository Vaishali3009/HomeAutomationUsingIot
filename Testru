@Test
void shouldLoadXmlSuccessfully_whenFileExists() throws Exception {
    // Arrange
    String path = "static-response/account-validation/success-response.xml";

    // Act
    Document doc = service.loadAndParseXml(path);

    // Assert
    assertNotNull(doc);
}

@Test
void shouldThrowException_whenXmlFileIsMissing() {
    // Arrange
    String invalidPath = "non-existent.xml";

    // Act & Assert
    assertThrows(AccountValidationException.class, () -> service.loadAndParseXml(invalidPath));
}




@Test
void shouldUpdateSuccessResponseWithoutBankIdentifier() throws Exception {
    // Arrange
    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
        getClass().getClassLoader().getResourceAsStream("static-response/account-validation/success-response.xml"));
    XPath xpath = XPathFactory.newInstance().newXPath();
    ResponseConfig config = new ResponseConfig(DOMESTIC_RESTRICTED, SWITCHED, PASSED, null);
    RequestParams params = new RequestParams("12345678901234", "UKBasicBankAccountNumber", "TXN-001", "SYS-1");

    // Act
    service.updateSuccessResponse(doc, xpath, config, params);

    // Assert
    String updatedStatus = xpath.evaluate("//status", doc);
    assertEquals("DomesticRestricted", updatedStatus); // replace with expected value from config
}


@Test
void shouldRemoveSystemNotificationBlockWhenNotApplicable() throws Exception {
    // Arrange
    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
        getClass().getClassLoader().getResourceAsStream("static-response/account-validation/error-response.xml"));
    XPath xpath = XPathFactory.newInstance().newXPath();
    ErrorDetail detail = new ErrorDetail("ERR001", "Some error", null, null);

    // Act
    service.applyErrorResponse(doc, xpath, detail, "TXN-123");

    // Assert
    Node block = (Node) xpath.evaluate(ServiceConstants.XPath.XPATH_SYS_NOTIFICATION_BLOCK, doc, XPathConstants.NODE);
    assertNull(block);  // Block should be removed
}



@Test
void shouldReturnStaticMatchWhenCustomerIdentifierMatches() throws Exception {
    // Arrange
    RetrievePrimaryCustomerForArrRequest request = ... // mock with valid known static IBAN
    WebServiceMessage message = mock(WebServiceMessage.class);
    // Act
    service.retrieveCustomer(request, message);
    // Assert â€“ verify SOAP response or success log
}
@Test
void shouldParseXmlSuccessfully() throws Exception {
    Document doc = service.loadAndParseXml("static-response/customer-retrieval/success-response.xml");
    assertNotNull(doc);
}

@Test
void shouldThrowExceptionIfXmlFileNotFound() {
    assertThrows(CustomerRetrievalException.class, () -> {
        service.loadAndParseXml("non-existent.xml");
    });
}
@Test
void shouldExtractLast14Digits() {
    String iban = "GB29NWBK60161331926501";
    assertEquals("60161331926501", service.extractLast14Digits(iban));
}

@Test
void shouldReturnEmptyWhenIbanIsTooShort() {
    assertEquals("", service.extractLast14Digits("123"));
}
@Test
void shouldReturnTrueForValidUbanSuffix() {
    // Arrange
    String validUban = "31926501"; // match last 14 digits from known IBAN
    // Act
    boolean result = service.isUbanValid(validUban);
    // Assert
    assertTrue(result);
}

@Test
void shouldReturnFalseForInvalidUbanSuffix() {
    assertFalse(service.isUbanValid("INVALID12345678"));
}
