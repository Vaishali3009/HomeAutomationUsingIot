
# Log
logging.pattern.level=%X{transactionId} [%level]
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{transactionId}] %-5level %logger{36} - %msg%n



----------------
package com.rbs.bdd.infrastructure.soap.interceptor;
import com.rbs.bdd.common.context.TransactionIdContext;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.stereotype.Component;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.server.EndpointInterceptor;
import org.springframework.ws.soap.SoapMessage;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.StringReader;
import java.util.UUID;

@Component
@Slf4j
public class TransactionIdInterceptor implements EndpointInterceptor {

    @Override
    public boolean handleRequest(MessageContext messageContext, Object endpoint) {
        try {
            WebServiceMessage request = messageContext.getRequest();

            // Extract transactionId from request XML if present
            String transactionId = extractTransactionId(request);

            if (transactionId == null || transactionId.isEmpty()) {
                transactionId = UUID.randomUUID().toString();
            }

            TransactionIdContext.set(transactionId);

            // Add to logs
            MDC.put("transactionId", transactionId);  // If using Logback/SLF4J MDC

        } catch (Exception e) {
            // Fallback in case of error
            TransactionIdContext.set(UUID.randomUUID().toString());
        }
        return true;
    }

    @Override
    public boolean handleResponse(MessageContext messageContext, Object endpoint) {
        TransactionIdContext.clear();
        MDC.remove("transactionId");
        return true;
    }

    @Override
    public boolean handleFault(MessageContext messageContext, Object endpoint) {
        TransactionIdContext.clear();
        MDC.remove("transactionId");
        return true;
    }

    @Override
    public void afterCompletion(MessageContext messageContext, Object endpoint, Exception ex) {
        TransactionIdContext.clear();
        MDC.remove("transactionId");
    }

    private String extractTransactionId(WebServiceMessage message) {
        try {
            // Convert Source to String
            Source source = message.getPayloadSource();
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.transform(source, new StreamResult(out));
            String xmlString = out.toString(); // Converts bytes to string

            // Parse XML
            Document document = DocumentBuilderFactory.newInstance()
                    .newDocumentBuilder()
                    .parse(new InputSource(new StringReader(xmlString)));

            NodeList nodes = document.getElementsByTagName("transactionId");
            if (nodes.getLength() > 0) {
                log.info("transactionId found in request");
                return nodes.item(0).getTextContent();
            }

        } catch (Exception e) {
            log.warn("Failed to extract transactionId", e);
        }
        return null;
    }
}
