 /**
     * Validates the provided {@link RequestParams} based on predefined rules for
     * account type (UK Basic or International) and returns a mapped {@link ErrorDetail}
     * from the provided {@code errorMap} based on failure conditions.
     * <p>
     * This method is reusable across multiple services and logs the validation
     * outcome per service context.
     *
     * @param p              the request parameter object containing account details
     * @param errorMap       a mapping of {@link ValidationErrorType} to corresponding {@link ErrorDetail}
     * @param ibanValidator  a predicate used to validate IBAN or UBAN using modulus or custom rule
     * @param serviceContext a string to log the calling service (e.g., "AccountValidation", "CustomerRetrieval")
     * @return an {@code Optional<ErrorDetail>} containing the matched error if validation fails; empty otherwise
     */
    public static Optional<ErrorDetail> validateAccount(
            RequestParams p,
            Map<ValidationErrorType, ErrorDetail> errorMap,
            Predicate<String> ibanValidator,
            String serviceContext
    ) {
        Optional<ErrorDetail> error = Optional.empty();

        if (ServiceConstants.AccountTypes.UK_BASIC_BANK_ACCOUNT.equals(p.codeValue())) {
            if (p.identifier().startsWith("GB")) {
                error = Optional.of(errorMap.get(ValidationErrorType.INVALID_PREFIX));
            } else if (p.length() != 14) {
                if(serviceContext.equals("CustomerRetrieval")){
                    error = Optional.of(errorMap.get(ValidationErrorType.INVALID_LENGTH));
                }else{
                error = Optional.of(errorMap.get(ValidationErrorType.INVALID_UBAN_LENGTH));}
            } else if (!ibanValidator.test(p.identifier())) {
                error = Optional.of(errorMap.get(ValidationErrorType.INVALID_MODULUS));
            } else {
                log.info("No error for UBAN [{}] in {} with identifier: {}", p.codeValue(), serviceContext, p.identifier());
            }

        } else if (ServiceConstants.AccountTypes.INTL_BANK_ACCOUNT.equals(p.codeValue())) {
            if (!p.identifier().startsWith("GB")) {
                error = Optional.of(errorMap.get(ValidationErrorType.INVALID_COUNTRY_CODE));
            } else if (p.length() != 22) {
                error = Optional.of(errorMap.get(ValidationErrorType.INVALID_IBAN_LENGTH));
            } else {
                log.info("No error for IBAN [{}] in {} with identifier: {}", p.codeValue(), serviceContext, p.identifier());
            }
        }

        return error;
    }


----------------

  /**
     * Removes a child node from the specified parent node.
     * If {@code tagName} is provided, it removes the child node by matching the local name.
     * If {@code tagName} is null, it directly removes the provided node.
     *
     * @param parentOrNode the parent node (for tag-based removal) or the target node (for direct removal)
     * @param tagName       the local name of the tag to be removed; pass null to directly remove the node
     */
    public static void removeChildNode(Node parentOrNode, String tagName) {
        if (tagName == null) {
            // Directly remove the node if valid
            if (parentOrNode != null && parentOrNode.getParentNode() != null) {
                parentOrNode.getParentNode().removeChild(parentOrNode);}}
        else {
            // Remove child by tag name from the given parent
            NodeList children = parentOrNode.getChildNodes();
            for (int i = 0; i < children.getLength(); i++) {
                Node child = children.item(i);
                if (tagName.equals(child.getLocalName())) {
                    parentOrNode.removeChild(child);
                    break;
                }}
        }
    }

---------------
   /**
     * Extracts flags from the request's {@code <requestIds>} element.
     * Checks for the presence of a systemId = "RequestID" and if its sub-elements exist.
     * @param requestIdNodes list of {@code <requestIds>} elements in the request
     * @return a record with flags indicating field presence
     */
    private static ValidationFlags extractValidationFlags(NodeList requestIdNodes) {
        for (int i = 0; i < requestIdNodes.getLength(); i++) {
            Node requestIdsNode = requestIdNodes.item(i);
            NodeList children = requestIdsNode.getChildNodes();
            String systemId = null;
            boolean txnIdPresent = false;
            boolean systemIdPresent = false;
            for (int j = 0; j < children.getLength(); j++) {
                Node child = children.item(j);
                String tag = child.getLocalName();
                if (SYSTEM_ID.equals(tag)) {
                    systemId = child.getTextContent();
                    systemIdPresent = true;
                } else if (TAG_TRANSACTION_ID.equals(tag)) {
                    txnIdPresent = true;
                }}
            if ("RequestID".equals(systemId)) {
                return new ValidationFlags(true, txnIdPresent, systemIdPresent);
            }
        }
        return new ValidationFlags(false, false, false);
    }


---------------
/**
     * Handles removal of <refRequestIds> node if <requestIds> is missing or empty.
     */
    private static void handleRefRequestIds(Document errorDoc, Document requestDoc, String txnId, String systemId) {
        Node requestIds = SoapInterceptorUtils.getNode(requestDoc, "requestIds");
        boolean isEmpty = isNodeEmpty(requestIds);
        Node refRequestIds = SoapInterceptorUtils.getNode(errorDoc, "refRequestIds");
        if (isEmpty  && refRequestIds != null) {
            refRequestIds.getParentNode().removeChild(refRequestIds);
            return;
        }
        if (refRequestIds != null) {
            if (txnId == null) removeNodes(refRequestIds, TAG_TRANSACTION_ID);
            if (systemId == null) removeNodes(refRequestIds, SYSTEM_ID);
            if (!refRequestIds.hasChildNodes()) {
                refRequestIds.getParentNode().removeChild(refRequestIds);
            }
        }
    }
