
package com.rbs.bdd.infrastructure.soap.interceptor;

import jakarta.xml.soap.MessageFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.soap.saaj.SaajSoapMessage;
import org.xml.sax.SAXParseException;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class AccountSchemaValidationInterceptorTest {

    private AccountSchemaValidationInterceptor interceptor;

    @BeforeEach
    void setUp() {
        interceptor = new AccountSchemaValidationInterceptor();
    }

    @Test
    void testHandleSchemaValidationFailure_customResponse() throws Exception {
        String dummyXml = """
            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
              <soapenv:Body>
                <testRequest></testRequest>
              </soapenv:Body>
            </soapenv:Envelope>
            """;

        WebServiceMessage request = new SaajSoapMessage(
                MessageFactory.newInstance().createMessage(null,
                        new ByteArrayInputStream(dummyXml.getBytes()))
        );

        MessageContext messageContext = mock(MessageContext.class);
        when(messageContext.getRequest()).thenReturn(request);

        MockHttpServletRequest servletRequest = new MockHttpServletRequest();
        MockHttpServletResponse servletResponse = new MockHttpServletResponse();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(servletRequest, servletResponse));

        boolean result = interceptor.handleRequestValidationErrors(messageContext, new SAXParseException[] {});
        assertFalse(result);

        String response = servletResponse.getContentAsString();
        assertTrue(response.contains("transactionId"));
        assertEquals(500, servletResponse.getStatus());
    }
}



----
package com.rbs.bdd.infrastructure.soap.interceptor;

import jakarta.xml.soap.MessageFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.context.MessageContext;
import org.springframework.ws.soap.saaj.SaajSoapMessage;
import org.xml.sax.SAXParseException;

import java.io.ByteArrayInputStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class CustomerSchemaValidationInterceptorTest {

    private CustomerSchemaValidationInterceptor interceptor;

    @BeforeEach
    void setUp() {
        interceptor = new CustomerSchemaValidationInterceptor();
    }

    @Test
    void testHandleSchemaValidationFailure_customResponse() throws Exception {
        String dummyXml = """
            <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
              <soapenv:Body>
                <testRequest></testRequest>
              </soapenv:Body>
            </soapenv:Envelope>
            """;

        WebServiceMessage request = new SaajSoapMessage(
                MessageFactory.newInstance().createMessage(null,
                        new ByteArrayInputStream(dummyXml.getBytes()))
        );

        MessageContext messageContext = mock(MessageContext.class);
        when(messageContext.getRequest()).thenReturn(request);

        MockHttpServletRequest servletRequest = new MockHttpServletRequest();
        MockHttpServletResponse servletResponse = new MockHttpServletResponse();
        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(servletRequest, servletResponse));

        boolean result = interceptor.handleRequestValidationErrors(messageContext, new SAXParseException[] {});
        assertFalse(result);

        String response = servletResponse.getContentAsString();
        assertTrue(response.contains("transactionId"));
        assertEquals(500, servletResponse.getStatus());
    }
}
