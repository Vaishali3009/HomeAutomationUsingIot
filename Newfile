@Override
public void retrieveCustomer(RetrievePrimaryCustomerForArrRequest request, WebServiceMessage message) {
    try {
        RequestParams params = extractParams(request);
        XPath xpath = XPathFactory.newInstance().newXPath();
        Document responseDoc = handleCustomerRetrieval(params, xpath);

        writeResponseToSoapMessage(message, responseDoc);
    } catch (Exception e) {
        logger.error("Customer retrieval failed", e);
        throw new AccountValidationException("Customer retrieval failed", e);
    }
}


private Document handleCustomerRetrieval(RequestParams params, XPath xpath) throws Exception {
    Optional<ErrorDetail> error = determineCustomerRetrievalError(params);
    if (error.isPresent()) {
        Document errorDoc = loadAndParseXml(ServiceConstants.Paths.ERROR_XML_PATH_FOR_CUSTOMER_RETRIEVAL);
        applyErrorResponse(errorDoc, xpath, error.get(), params.originalTxnId());
        return errorDoc;
    }

    CustomerNameMapping matched = CustomerNameMapping.fromIdentifier(params.identifier());
    if (matched != null) {
        Document responseDoc = loadAndParseXml(STATIC_RESPONSE_PATH);
        updateName(responseDoc, xpath, matched.getFirstName(), matched.getLastName(), matched.getPrefixType());
        logger.info("Returning matched customer response for IBAN: {}", matched.getIban());
        return responseDoc;
    }

    Document notFoundDoc = loadAndParseXml(ServiceConstants.Paths.ERROR_XML_PATH);
    applyErrorResponse(notFoundDoc, xpath, ErrorConstants.ERR_CUSTOMER_NOT_FOUND.detail(), params.originalTxnId());
    return notFoundDoc;
}


private void writeResponseToSoapMessage(WebServiceMessage message, Document responseDoc) throws Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    TransformerFactory transformerFactory = TransformerFactory.newInstance();
    transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
    transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
    Transformer transformer = transformerFactory.newTransformer();
    transformer.transform(new DOMSource(responseDoc), new StreamResult(out));
    ((SaajSoapMessage) message).getSaajMessage().getSOAPPart()
            .setContent(new StreamSource(new ByteArrayInputStream(out.toByteArray())));
}




/**
 * Handles removal of <refRequestIds> node if <requestIds> is missing or empty.
 */
private static void handleRefRequestIds(Document errorDoc, Document requestDoc, String txnId, String systemId) {
    Node requestIds = SoapInterceptorUtils.getNode(requestDoc, "requestIds");
    Node refRequestIds = SoapInterceptorUtils.getNode(errorDoc, "refRequestIds");

    if (shouldRemoveEntireRefRequestIds(requestIds, refRequestIds)) return;

    if (refRequestIds != null) {
        removeMissingChildNodes(refRequestIds, txnId, systemId);
        removeIfEmpty(refRequestIds);
    }
}

private static boolean shouldRemoveEntireRefRequestIds(Node requestIds, Node refRequestIds) {
    if (isNodeEmpty(requestIds) && refRequestIds != null) {
        refRequestIds.getParentNode().removeChild(refRequestIds);
        return true;
    }
    return false;
}

private static void removeMissingChildNodes(Node refRequestIds, String txnId, String systemId) {
    if (txnId == null) removeNodes(refRequestIds, TAG_TRANSACTION_ID);
    if (systemId == null) removeNodes(refRequestIds, SYSTEM_ID);
}

private static void removeIfEmpty(Node node) {
    if (!node.hasChildNodes()) {
        node.getParentNode().removeChild(node);
    }
}
