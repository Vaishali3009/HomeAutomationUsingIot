package com.rbs.bdd.infrastructure.soap.api;

import com.rbs.bdd.application.port.in.CustomerRetrievalPort;
import com.rbs.bdd.application.port.in.PaymentValidationPort;
import com.rbsg.soa.c040paymentmanagement.arrvalidationforpayment.v01.ValidateArrangementForPaymentRequest;
import com.rbsg.soa.c040paymentmanagement.customerretrievalforpayment.v01.RetrievePrimaryCustomerForArrRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.ws.WebServiceMessage;
import org.springframework.ws.context.MessageContext;

import static org.mockito.Mockito.*;

/**
 * Unit tests for {@link PaymentValidationSoapAdapter}, which handles SOAP requests
 * for account validation and customer retrieval.
 */
class PaymentValidationSoapAdapterTest {

    private PaymentValidationPort paymentValidationPort;
    private CustomerRetrievalPort customerRetrievalPort;
    private PaymentValidationSoapAdapter adapter;
    private MessageContext mockContext;
    private WebServiceMessage mockResponse;

    /**
     * Sets up the required mocks before each test.
     */
    @BeforeEach
    void setUp() {
        paymentValidationPort = mock(PaymentValidationPort.class);
        customerRetrievalPort = mock(CustomerRetrievalPort.class);
        adapter = new PaymentValidationSoapAdapter(paymentValidationPort, customerRetrievalPort);

        mockContext = mock(MessageContext.class);
        mockResponse = mock(WebServiceMessage.class);

        when(mockContext.getResponse()).thenReturn(mockResponse);
    }

    /**
     * Tests that the `validateArrangementForPayment` method delegates the request
     * to the paymentValidationPort with the correct arguments.
     */
    @Test
    void testValidateArrangementForPaymentDelegatesToPort() {
        ValidateArrangementForPaymentRequest request = new ValidateArrangementForPaymentRequest();

        adapter.validateArrangementForPayment(request, mockContext);

        verify(paymentValidationPort, times(1)).validateArrangementForPayment(eq(request), eq(mockResponse));
    }

    /**
     * Tests that the `validateCustomerRetrieval` method delegates the request
     * to the customerRetrievalPort with the correct arguments.
     */
    @Test
    void testValidateCustomerRetrievalDelegatesToPort() {
        RetrievePrimaryCustomerForArrRequest request = new RetrievePrimaryCustomerForArrRequest();

        adapter.validateCustomerRetrieval(request, mockContext);

        verify(customerRetrievalPort, times(1)).validateCustomerRetrieval(eq(request), eq(mockResponse));
    }
}
