package com.rbs.bdd.application.exception;



/**
 * Exception thrown when  the account validation fails during SOAP request processing.
 */
public class AccountValidationException extends RuntimeException {

    /**
     * Constructs a new AccountValidationException with a specific message.
     *
     * @param message the detail message
     */
    public AccountValidationException(String message) {
        super(message);
    }

    /**
     * Constructs a new AccountValidationException with a message and cause.
     *
     * @param message the detail message
     * @param cause the cause of the exception
     */
    public AccountValidationException(String message, Throwable cause) {
        super(message, cause);
    }
}


------------------
package com.rbs.bdd.application.exception;

/**
 * Exception thrown when  the customer Retrieval fails during SOAP request processing.
 */
public class CustomerRetrievalException extends RuntimeException {

    /**
     * Constructs a new CustomerRetrievalException with a specific message.
     *
     * @param message the detail message
     */
    public CustomerRetrievalException(String message) {
        super(message);
    }

    /**
     * Constructs a new CustomerRetrievalException with a message and cause.
     *
     * @param message the detail message
     * @param cause the cause of the exception
     */
    public CustomerRetrievalException(String message, Throwable cause) {
        super(message, cause);
    }
}


------------------
package com.rbs.bdd.application.exception;

/**
 * Exception thrown when  the schema validation fails during SOAP request processing.
 */
public class SchemaValidationException extends RuntimeException {

    /**
     * Constructs a new SchemaValidationException with a specific message.
     *
     * @param message the detail message
     */
    public SchemaValidationException(String message) {
        super(message);
    }

    /**
     * Constructs a new SchemaValidationException with a message and cause.
     *
     * @param message the detail message
     * @param cause the cause of the exception
     */
    public SchemaValidationException(String message, Throwable cause) {
        super(message, cause);
    }
}

------------------
package com.rbs.bdd.application.exception;

public class SecretsNotFoundException extends RuntimeException{
    public SecretsNotFoundException(String message){
        super(message);
    }

}


---------------
package com.rbs.bdd.application.exception;



/**
 * Exception thrown when schema Loading fails during SOAP request processing.
 */
public class XsdSchemaLoadingException extends RuntimeException{

    /**
     * Constructs a new XsdSchemaLoadingException with a specific message.
     *
     * @param message the detail message
     */
    public XsdSchemaLoadingException(String message) {
        super(message);
    }

    /**
     * Constructs a new XsdSchemaLoadingException with a message and cause.
     *
     * @param message the detail message
     * @param cause the cause of the exception
     */
    public XsdSchemaLoadingException(String message,Throwable cause) {
        super(message, cause);
    }
}


---------------
package com.rbs.bdd.application.port.in;

import org.springframework.ws.WebServiceMessage;
import com.rbsg.soa.c040paymentmanagement.customerretrievalforpayment.v01.RetrievePrimaryCustomerForArrRequest;

/**
 * Entry port for handling SOAP requests related to customer retrieval.
 * Follows hexagonal architecture's `port in` pattern.
 */
public interface CustomerRetrievalPort {
        /**
         * Validates a customer retrieval request by delegating to the underlying orchestrator/service.
         *
         * @param request The SOAP request payload.
         * @param message The outgoing WebServiceMessage to be modified and returned.
         */
        void validateCustomerRetrieval(RetrievePrimaryCustomerForArrRequest request, WebServiceMessage message);


    }


----
package com.rbs.bdd.application.port.in;


import org.springframework.ws.WebServiceMessage;
import com.rbsg.soa.c040paymentmanagement.arrvalidationforpayment.v01.ValidateArrangementForPaymentRequest;
/**
 * Entry port for handling SOAP requests related to payment validation.
 * Follows hexagonal architecture's `port in` pattern.
 */
public interface PaymentValidationPort {


    /**
     * Validates a payment arrangement request by delegating to the underlying orchestrator/service.
     *
     * @param request The SOAP request payload.
     * @param message The outgoing WebServiceMessage to be modified and returned.
     */
    void validateArrangementForPayment(ValidateArrangementForPaymentRequest request,WebServiceMessage message);



}


-----
package com.rbs.bdd.application.port.out;

import com.rbsg.soa.c040paymentmanagement.arrvalidationforpayment.v01.ValidateArrangementForPaymentRequest;

import org.springframework.ws.WebServiceMessage;

/**
 * Defines the business contract for validating payment accounts.
 * Used by the orchestrator to call schema and business rule validators.
 */
public interface AccountValidationPort {
    /**
     * Performs XSD schema validation of the request. (Currently delegated to Spring WS config.)
     *
     * @param request The SOAP request payload.
     */
    void validateSchema(ValidateArrangementForPaymentRequest request);


    /**
     * Applies business rules on the static response XML based on request content,
     * and writes the final SOAP response directly to the output message.
     *
     * @param request The incoming SOAP request.
     * @param message The WebServiceMessage to write the modified response to.
     */
    void validateBusinessRules(ValidateArrangementForPaymentRequest request,WebServiceMessage message);

     }



------------
package com.rbs.bdd.application.port.out;



import org.springframework.ws.WebServiceMessage;
import com.rbsg.soa.c040paymentmanagement.customerretrievalforpayment.v01.RetrievePrimaryCustomerForArrRequest;


/**
 * Defines the business contract for validating customer  accounts.
 * Used by the orchestrator to call schema and business rule validators.
 */
public interface RetrieveCustomerPort {
    /**
     * Performs XSD schema validation of the request. (Currently delegated to Spring WS config.)
     *
     * @param request The SOAP request payload.
     */
    void validateSchema(RetrievePrimaryCustomerForArrRequest request);


    /**
     * Applies business rules on the  response XML based on request content,
     * and writes the final SOAP response directly to the output message.
     *
     * @param request The incoming SOAP request.
     * @param message The WebServiceMessage to write the modified response to.
     */
    void retrieveCustomer(RetrievePrimaryCustomerForArrRequest request, WebServiceMessage message);

}



----
