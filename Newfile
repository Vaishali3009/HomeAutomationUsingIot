/**
 * Applies business rule validation based on account identifiers, code values, and IBAN/UBAN checks.
 * Depending on the logic, either a static success or error response is returned.
 *
 * @param request the incoming SOAP request
 * @param message the SOAP response message to be modified
 */
@Override
public void validateBusinessRules(ValidateArrangementForPaymentRequest request, WebServiceMessage message) {
    try {
        log.info("Starting business rule validation for request.");
        RequestParams params = extractParams(request);
        XPath xpath = XPathFactory.newInstance().newXPath();
        Document responseDoc = handleBusinessValidation(params, xpath);

        transformAndSetResponse(responseDoc, message);
        log.info("Business response prepared and set successfully.");

    } catch (Exception ex) {
        log.error("Business rule validation failed", ex);
        throw new AccountValidationException("Validation failed", ex);
    }
}



private Document handleBusinessValidation(RequestParams params, XPath xpath) throws Exception {
    Optional<ErrorDetail> error = determineError(params);
    if (error.isPresent()) {
        log.info("Business error condition detected: {}", error.get().description());
        Document errorDoc = loadAndParseXml(ServiceConstants.Paths.ERROR_XML_PATH);
        applyErrorResponse(errorDoc, xpath, error.get(), params.originalTxnId());
        return errorDoc;
    }

    Optional<ResponseConfig> config = determineMatchingConfig(params);
    if (config.isPresent()) {
        log.info("Matched account configuration: {}", config.get());
        Document successDoc = loadAndParseXml("static-response/account-validation/success-response.xml");
        updateSuccessResponse(successDoc, xpath, config.get(), params);
        return successDoc;
    }

    log.warn("No account matched. Returning MOD97 failure.");
    Document mod97Doc = loadAndParseXml(ServiceConstants.Paths.ERROR_XML_PATH);
    applyErrorResponse(mod97Doc, xpath, ErrorConstants.ERR_MOD97_IBAN.detail(), params.originalTxnId());
    return mod97Doc;
}



private void transformAndSetResponse(Document doc, WebServiceMessage message) throws Exception {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    TransformerFactory transformerFactory = TransformerFactory.newInstance();
    transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
    transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
    Transformer transformer = transformerFactory.newTransformer();
    transformer.transform(new DOMSource(doc), new StreamResult(out));

    ((SaajSoapMessage) message).getSaajMessage().getSOAPPart()
        .setContent(new StreamSource(new ByteArrayInputStream(out.toByteArray())));
}
